# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pkg import loadbalance_pb2 as loadbalance__pb2


class DNNLoadBalancerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LBInference = channel.unary_unary(
            '/DNNLoadBalancer.DNNLoadBalancer/LBInference',
            request_serializer=loadbalance__pb2.Query.SerializeToString,
            response_deserializer=loadbalance__pb2.Result.FromString,
        )
        self.GetLayers = channel.unary_unary(
            '/DNNLoadBalancer.DNNLoadBalancer/GetLayers',
            request_serializer=loadbalance__pb2.GetLayersRequest.SerializeToString,
            response_deserializer=loadbalance__pb2.GetLayersResponse.FromString,
        )
        self.GetPrediction = channel.unary_unary(
            '/DNNLoadBalancer.DNNLoadBalancer/GetPrediction',
            request_serializer=loadbalance__pb2.GetPredictionRequest.SerializeToString,
            response_deserializer=loadbalance__pb2.GetPredictionResponse.FromString,
        )
        self.GetResults = channel.unary_unary(
            '/DNNLoadBalancer.DNNLoadBalancer/GetResults',
            request_serializer=loadbalance__pb2.GetResultsRequest.SerializeToString,
            response_deserializer=loadbalance__pb2.GetResultsResponse.FromString,
        )


class DNNLoadBalancerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LBInference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrediction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DNNLoadBalancerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'LBInference': grpc.unary_unary_rpc_method_handler(
            servicer.LBInference,
            request_deserializer=loadbalance__pb2.Query.FromString,
            response_serializer=loadbalance__pb2.Result.SerializeToString,
        ),
        'GetLayers': grpc.unary_unary_rpc_method_handler(
            servicer.GetLayers,
            request_deserializer=loadbalance__pb2.GetLayersRequest.FromString,
            response_serializer=loadbalance__pb2.GetLayersResponse.SerializeToString,
        ),
        'GetPrediction': grpc.unary_unary_rpc_method_handler(
            servicer.GetPrediction,
            request_deserializer=loadbalance__pb2.GetPredictionRequest.FromString,
            response_serializer=loadbalance__pb2.GetPredictionResponse.SerializeToString,
        ),
        'GetResults': grpc.unary_unary_rpc_method_handler(
            servicer.GetResults,
            request_deserializer=loadbalance__pb2.GetResultsRequest.FromString,
            response_serializer=loadbalance__pb2.GetResultsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DNNLoadBalancer.DNNLoadBalancer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))

 # This class is part of an EXPERIMENTAL API.


class DNNLoadBalancer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LBInference(request,
                    target,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DNNLoadBalancer.DNNLoadBalancer/LBInference',
                                             loadbalance__pb2.Query.SerializeToString,
                                             loadbalance__pb2.Result.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLayers(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DNNLoadBalancer.DNNLoadBalancer/GetLayers',
                                             loadbalance__pb2.GetLayersRequest.SerializeToString,
                                             loadbalance__pb2.GetLayersResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrediction(request,
                      target,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DNNLoadBalancer.DNNLoadBalancer/GetPrediction',
                                             loadbalance__pb2.GetPredictionRequest.SerializeToString,
                                             loadbalance__pb2.GetPredictionResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetResults(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DNNLoadBalancer.DNNLoadBalancer/GetResults',
                                             loadbalance__pb2.GetResultsRequest.SerializeToString,
                                             loadbalance__pb2.GetResultsResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
